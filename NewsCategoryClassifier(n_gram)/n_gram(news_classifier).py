# -*- coding: utf-8 -*-
"""n-gram(news_classifier).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EzPWULSxkQufW4gUEgHUW5igrDTfFJHj
"""

from sklearn.feature_extraction.text import CountVectorizer

v = CountVectorizer(ngram_range=(1,3))
v.fit(['Thor eat pizza','Loki tall','Loki eat pizza'])
v.vocabulary_

corpus = [
    "Thor ate pizza",
    "Loki is tall",
    "Loki is eating pizza"
]

import spacy

#Load english Language model and create nlp object frm it
nlp = spacy.load("en_core_web_sm")

def preprocess(text):
  doc = nlp(text)

  filtered_tokens = []

  for token in doc:
    if token.is_stop or token.is_punct:
      continue
    filtered_tokens.append(token.lemma_)

  return " ".join(filtered_tokens)
preprocess("Thor is eating pizza")

Corpus_process = [preprocess(text) for text in corpus]
Corpus_process

v = CountVectorizer(ngram_range = (1,2))
v.fit(Corpus_process)
v.vocabulary_

v.transform(['Thor eat pizza']).toarray()

v.transform(['How are you saimim']).toarray()

import pandas as pd

df = pd.read_json("/content/News_Category_Dataset.json", lines=True)
print(df.shape)
df.head()

df['short_description'][0]

df.category.value_counts().sort_values(ascending = False)

df['category'].unique()

fr = ['CRIME', 'ENTERTAINMENT', 'WORLD NEWS', 'IMPACT', 'POLITICS',
       'WEIRD NEWS', 'BLACK VOICES', 'WOMEN', 'COMEDY', 'QUEER VOICES',
       'SPORTS', 'BUSINESS', 'TRAVEL', 'MEDIA', 'TECH', 'RELIGION',
       'SCIENCE', 'LATINO VOICES', 'EDUCATION', 'COLLEGE', 'PARENTS',
       'ARTS & CULTURE', 'STYLE', 'GREEN', 'TASTE', 'HEALTHY LIVING',
       'THE WORLDPOST', 'GOOD NEWS', 'WORLDPOST', 'FIFTY', 'ARTS']

#video 19.48

df = df.drop(['short_description','date','link','authors'], axis = 1)

min_sample = 1004
created_vars = []  # List to store created variable names

for category in fr:
    # Replace '&' with 'and' and create dynamic DataFrame names
    sanitized_category = category.replace(" ", "_").replace("&", "and")
    globals()[f'df_{sanitized_category}'] = df[df.category == category].sample(min_sample, random_state=2022)

df_balanced = pd.concat([df_CRIME, df_ENTERTAINMENT, df_WORLD_NEWS, df_IMPACT, df_POLITICS, df_WEIRD_NEWS,
                         df_BLACK_VOICES, df_WOMEN, df_COMEDY, df_QUEER_VOICES, df_SPORTS, df_BUSINESS,
                         df_TRAVEL, df_MEDIA, df_TECH, df_RELIGION, df_SCIENCE, df_LATINO_VOICES,
                         df_EDUCATION, df_COLLEGE, df_PARENTS, df_ARTS_and_CULTURE, df_STYLE, df_GREEN,
                         df_TASTE, df_HEALTHY_LIVING, df_THE_WORLDPOST, df_GOOD_NEWS, df_WORLDPOST,
                         df_FIFTY, df_ARTS], axis=0)

# Check the category distribution
df_balanced.category.value_counts()

df_balanced

from sklearn.preprocessing import LabelEncoder

lb = LabelEncoder()

df_balanced['num_category'] = lb.fit_transform(df_balanced.category)

dict(zip(lb.classes_,lb.transform(lb.classes_)))

df_balanced

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(df_balanced.headline,df_balanced.num_category,test_size = 0.2,random_state = 2022,stratify = df_balanced.num_category)

print(x_train.shape)
x_train.head()

y_train.value_counts()

y_test.value_counts()

from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report

clf =Pipeline([
    ('vectorizer_bow',CountVectorizer()),
    ('Multi NB', MultinomialNB())
])
clf.fit(x_train,y_train)
y_pred = clf.predict(x_test)
print(classification_report(y_test,y_pred))

from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report

clf =Pipeline([
    ('vectorizer_bow',CountVectorizer(ngram_range=(1,2))),
    ('Multi NB', MultinomialNB())
])
clf.fit(x_train,y_train)
y_pred = clf.predict(x_test)
print(classification_report(y_test,y_pred))

y_test[:5]

x_test[:5]

y_pred[:5]

df_balanced['preprocessed_text'] = df_balanced.headline.apply(preprocess)

df_balanced

x_train,x_test,y_train,y_test = train_test_split(df_balanced.preprocessed_text,df_balanced.num_category,test_size = 0.2,random_state = 2022,stratify = df_balanced.num_category)

clf =Pipeline([
    ('vectorizer_bow',CountVectorizer(ngram_range=(1,2))),
    ('Multi NB', MultinomialNB())
])
clf.fit(x_train,y_train)
y_pred = clf.predict(x_test)
print(classification_report(y_test,y_pred))